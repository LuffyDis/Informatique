********** EntityFramework Code First **************

******** Introduction *************
EntityFramework Code First et plus particulièrement la classe DbContext permet d'établir un lien entre notre 
model et notre les tables de notre base de données. 

******** Installation *************
Pour installer EntityFramework , il suffit de télécharger le package EntityFramework via nuget. 
La première chose à faire ensuite est de créer un Context de donnée en héritant de la classe DbContext. 

Exemple : 

    public class TrackerDbContext : DbContext 
    {

    }
    
******** DbContext ****************

DbContext a éssentiellement 3 roles :
1 . Etablir un lien entre les tables et le model , ou plutot dire quel entitée fera partir de notre DB via les DbSet<T>. 
2 . Navigation : établir les relations entre les entitées 
3 . Datas par défault  

1. DbSet<T>
    Pour dire quel seront les entitées de notre model qui seront persistés , Dbcontext doit exposé des DbSet<T> via des
    propriétées. 
    Exemple : 

3. Datas 
    Pour créer un jeu de donnée par défault il faut : 
    3.1 Créer un initializer de données 
    3.2 Configurer DatabaseInitializer
    
    3.1 DatabaseInitializer
    Une classe DatabaseInitializer doit hériter d'une des classes suivantes : 
        - CreateDatabaseIfNotExists<CodeCamperDbContext>      // when model is stable
        - DropCreateDatabaseIfModelChanges<CodeCamperDbContext> // when iterating
    Elle doit ensuite override la méthode Seed dans laquel on va mettre la logique pour créer les données avec le 
    context. 
    
    3.2 
     Pour utiliser DatabaseInitializer , il faut le rajouter par la ligne de code suivante : 
         Database.SetInitializer(new CodeCamperDatabaseInitializer());//Database -> propriétée heritée de DbContext
    

******** Models ********************
1. Id : dans un POCO si une propriétée se nomme Id , EntityFramework sera capalble de comprends que c'est la key

