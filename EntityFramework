********** EntityFramework Code First **************

******** Introduction *************
EntityFramework Code First et plus particulièrement la classe DbContext permet d'établir un lien entre notre 
model et notre les tables de notre base de données. 

******** Installation *************
Pour installer EntityFramework , il suffit de télécharger le package EntityFramework via nuget. 
La première chose à faire ensuite est de créer un Context de donnée en héritant de la classe DbContext. 

Exemple : 

    public class TrackerDbContext : DbContext 
    {

    }
    
******** DbContext ****************

DbContext a éssentiellement 3 roles :
1 . Etablir un lien entre les tables et le model , ou plutot dire quel entitée fera partir de notre DB via les DbSet<T>. 
2 . Config + Navigation : établir les relations entre les entitées 
3 . Datas par défault  
4 . Utilisation 

1. DbSet<T>
    Pour dire quel seront les entitées de notre model qui seront persistés , Dbcontext doit exposé des DbSet<T> via des
    propriétées. 
    Exemple : 

2. 2.1 Navigation
    Pour definir les relations entre les entitées et que elle se répercurte en base de donnée il faut : 
    0. Chaque entitée doit contenir une clé etrangère pour la navigation et une propriétée pour l'object référence :
        ***** exemple *****
        public int Id { get; set; }
        public long Number { get; set; }
        //Table relation 
        public int TableId { get; set; }
        public Table Table { get; set; }
    1. Pour chaque entitée créer une classe qui herite de la classe générique : EntityTypeConfiguration<T>
    2. Dans le constructeur de la classe avec Code Fluent definir les relations entre les entitées 
       Voici 2 exemples :
       
       *** Remarques ***
       Lorsqu'on définit les relations on doit le faire dans le sens 1 to n (pas besoin de le faire dans le sens n to 1)
       
       **** Relation n to 1 ****
        // Session has 1 Speaker, Speaker has many Session records
            HasRequired(s => s.Speaker)
               .WithMany(p => p.SpeakerSessions)
               .HasForeignKey(s => s.SpeakerId);
        
        **** Relation n to n ****
        // Attendance has a composite key: SessionId and PersonId
            HasKey(a => new { a.SessionId, a.PersonId });

            // Attendance has 1 Session, Sessions have many Attendance records
            HasRequired(a => a.Session)
                .WithMany(s => s.AttendanceList)
                .HasForeignKey(a => a.SessionId)
                .WillCascadeOnDelete(false);

            // Attendance has 1 Person, Persons have many Attendance records
            HasRequired(a => a.Person)
                .WithMany(p => p.AttendanceList)
                .HasForeignKey(a => a.PersonId)
                .WillCascadeOnDelete(false);
    3. Dans le DbContext overrider la méthode OnModelCreating 
        -> modelBuilder.Configurations.Add(new SessionConfiguration());
    2.2 Configuration : dans la méthode OnModelCreating on peut aussi definir la configuration de la db
        -> // Use singular table names
            modelBuilder.Conventions.Remove<PluralizingTableNameConvention>();

3. Datas 
    Pour créer un jeu de donnée par défault il faut : 
    3.1 Créer un initializer de données 
    3.2 Configurer DatabaseInitializer
    
    3.1 DatabaseInitializer
    Une classe DatabaseInitializer doit hériter d'une des classes suivantes : 
        - CreateDatabaseIfNotExists<CodeCamperDbContext>      // when model is stable
        - DropCreateDatabaseIfModelChanges<CodeCamperDbContext> // when iterating
    Elle doit ensuite override la méthode Seed dans laquel on va mettre la logique pour créer les données avec le 
    context. 
    
    3.2 
     Pour utiliser DatabaseInitializer , il faut le rajouter par la ligne de code suivante : 
         Database.SetInitializer(new CodeCamperDatabaseInitializer());//Database -> propriétée heritée de DbContext
    
4. Utilisation
   Si on veut faire une application console pour construire notre DB : il faut executer le code suivant 
    Database.SetInitializer(new TrackerDataBaseInitializer());
    //Initialize db 
    var context = new TrackerDbContext();
    context.Database.Initialize(false);

******** Models ********************
1. Id : dans un POCO si une propriétée se nomme Id , EntityFramework sera capalble de comprends que c'est la key

******** Help *********************
Tous les scénarios de base sont détaillés sur le site de EF : http://msdn.microsoft.com/en-us/data/jj591620.aspx#CompositeKey
